package cucumber.ksp

import com.google.devtools.ksp.processing.*
import com.google.devtools.ksp.symbol.*

class PageHelperProcessor(
    private val codeGenerator: CodeGenerator,
    private val logger: KSPLogger
) : SymbolProcessor {

    override fun process(resolver: Resolver): List<KSAnnotated> {
        val annotationName = "cucumber.common.page.GenerateCucumberPageHelper"

        val annotated = resolver.getSymbolsWithAnnotation(annotationName)
            .filterIsInstance<KSClassDeclaration>()
            .toList() // Eager evaluation for safe reuse

        if (!annotated.isEmpty()) {
            annotated.forEach { classDecl ->
                logger.info("âœ… Generating page helper for @${classDecl.simpleName.asString()}")
                generateWithPageFunction(classDecl)
            }
        }

        return emptyList()
    }

    private fun generateWithPageFunction(classDecl: KSClassDeclaration) {
        val pkg = classDecl.packageName.asString()
        val className = classDecl.simpleName.asString()
        val fileName = "With${className}"

        val file = codeGenerator.createNewFile(Dependencies.ALL_FILES, pkg, fileName)

        val content = """
            // Auto-generated by KSP
            package $pkg

            import cucumber.common.ScenarioContext
            import cucumber.common.page.page

            inline fun ScenarioContext.with${className}(block: $className.() -> Unit) {
                val page = this.page<$className>()
                page.block()
            }
        """.trimIndent()

        file.bufferedWriter().use { it.write(content) }
    }
}
